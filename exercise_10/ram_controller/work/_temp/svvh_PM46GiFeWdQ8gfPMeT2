-- sig = LI<1_1DAOhDK41l74lHLS3
library verilog;
use verilog.vl_types.all;
entity cellram is
    generic(
        tACLK           : real    := 7.000000;
        tAPA            : real    := 20.000000;
        tAW             : real    := 70.000000;
        tBW             : real    := 70.000000;
        tCBPH           : real    := 5.000000;
        tCLK            : real    := 9.620000;
        tCSP            : real    := 3.000000;
        tCW             : real    := 70.000000;
        tHD             : real    := 2.000000;
        tKP             : real    := 3.000000;
        tPC             : real    := 20.000000;
        tRC             : real    := 70.000000;
        tSP             : real    := 3.000000;
        tVP             : real    := 5.000000;
        tVS             : real    := 70.000000;
        tWC             : real    := 70.000000;
        tWP             : real    := 45.000000;
        tAS             : real    := 0.000000;
        tAVH            : real    := 2.000000;
        tAVS            : real    := 5.000000;
        tCPH            : real    := 5.000000;
        tCVS            : real    := 7.000000;
        tDH             : real    := 0.000000;
        tDPDX           : real    := 10000.000000;
        tDW             : real    := 20.000000;
        tOW             : real    := 5.000000;
        tPU             : real    := 150000.000000;
        tVPH            : real    := 0.000000;
        tWPH            : real    := 10.000000;
        tWR             : real    := 0.000000;
        ADQ_BITS        : integer := 23;
        DQ_BITS         : integer := 16;
        BY_BITS         : integer := 2;
        ADDR_BITS       : integer := 23;
        COL_BITS        : integer := 7;
        MEM_BITS        : integer := 10;
        BCR             : vl_logic_vector(0 to 1) := (Hi1, Hi0);
        RCR             : vl_logic_vector(0 to 1) := (Hi0, Hi0);
        DIDR            : vl_logic_vector(0 to 1) := (Hi0, Hi1);
        REG_SEL         : integer := 18;
        CR10            : vl_logic_vector(0 to 1) := (Hi0, Hi1);
        CR15            : vl_logic_vector(0 to 1) := (Hi1, Hi0);
        CR20            : vl_logic_vector(0 to 1) := (Hi1, Hi1);
        GENERATION      : vl_logic_vector(0 to 1) := (Hi1, Hi0);
        CR20WAIT_POLARITY: vl_logic := Hi1;
        CRE_READ        : vl_logic := Hi1;
        BCR_MASK        : vl_logic_vector(0 to 17) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1);
        BCR_DEFAULT     : vl_logic_vector(0 to 15) := (Hi1, Hi0, Hi0, Hi1, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi1, Hi1, Hi1, Hi1, Hi1);
        RCR_MASK        : vl_logic_vector(0 to 17) := (Hi1, Hi1, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi1, Hi0, Hi1, Hi1, Hi1);
        RCR_DEFAULT     : vl_logic_vector(0 to 15) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0);
        DIDR_MASK       : vl_logic_vector(0 to 17) := (Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1, Hi1);
        DIDR_DEFAULT    : vl_logic_vector(0 to 15) := (Hi0, Hi0, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1, Hi0, Hi1, Hi0, Hi0, Hi0, Hi0, Hi1, Hi1);
        DEBUG           : integer := 1;
        IDLE            : integer := 0;
        WR              : integer := 1;
        RD              : integer := 2;
        CFG_RD          : integer := 3;
        CFG_WR          : integer := 4
    );
    port(
        clk             : in     vl_logic;
        adv_n           : in     vl_logic;
        cre             : in     vl_logic;
        o_wait          : out    vl_logic;
        ce_n            : in     vl_logic;
        oe_n            : in     vl_logic;
        we_n            : in     vl_logic;
        lb_n            : in     vl_logic;
        ub_n            : in     vl_logic;
        addr            : in     vl_logic_vector;
        dq              : inout  vl_logic_vector
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of tACLK : constant is 1;
    attribute mti_svvh_generic_type of tAPA : constant is 1;
    attribute mti_svvh_generic_type of tAW : constant is 1;
    attribute mti_svvh_generic_type of tBW : constant is 1;
    attribute mti_svvh_generic_type of tCBPH : constant is 1;
    attribute mti_svvh_generic_type of tCLK : constant is 1;
    attribute mti_svvh_generic_type of tCSP : constant is 1;
    attribute mti_svvh_generic_type of tCW : constant is 1;
    attribute mti_svvh_generic_type of tHD : constant is 1;
    attribute mti_svvh_generic_type of tKP : constant is 1;
    attribute mti_svvh_generic_type of tPC : constant is 1;
    attribute mti_svvh_generic_type of tRC : constant is 1;
    attribute mti_svvh_generic_type of tSP : constant is 1;
    attribute mti_svvh_generic_type of tVP : constant is 1;
    attribute mti_svvh_generic_type of tVS : constant is 1;
    attribute mti_svvh_generic_type of tWC : constant is 1;
    attribute mti_svvh_generic_type of tWP : constant is 1;
    attribute mti_svvh_generic_type of tAS : constant is 1;
    attribute mti_svvh_generic_type of tAVH : constant is 1;
    attribute mti_svvh_generic_type of tAVS : constant is 1;
    attribute mti_svvh_generic_type of tCPH : constant is 1;
    attribute mti_svvh_generic_type of tCVS : constant is 1;
    attribute mti_svvh_generic_type of tDH : constant is 1;
    attribute mti_svvh_generic_type of tDPDX : constant is 1;
    attribute mti_svvh_generic_type of tDW : constant is 1;
    attribute mti_svvh_generic_type of tOW : constant is 1;
    attribute mti_svvh_generic_type of tPU : constant is 1;
    attribute mti_svvh_generic_type of tVPH : constant is 1;
    attribute mti_svvh_generic_type of tWPH : constant is 1;
    attribute mti_svvh_generic_type of tWR : constant is 1;
    attribute mti_svvh_generic_type of ADQ_BITS : constant is 1;
    attribute mti_svvh_generic_type of DQ_BITS : constant is 1;
    attribute mti_svvh_generic_type of BY_BITS : constant is 1;
    attribute mti_svvh_generic_type of ADDR_BITS : constant is 1;
    attribute mti_svvh_generic_type of COL_BITS : constant is 1;
    attribute mti_svvh_generic_type of MEM_BITS : constant is 1;
    attribute mti_svvh_generic_type of BCR : constant is 1;
    attribute mti_svvh_generic_type of RCR : constant is 1;
    attribute mti_svvh_generic_type of DIDR : constant is 1;
    attribute mti_svvh_generic_type of REG_SEL : constant is 1;
    attribute mti_svvh_generic_type of CR10 : constant is 1;
    attribute mti_svvh_generic_type of CR15 : constant is 1;
    attribute mti_svvh_generic_type of CR20 : constant is 1;
    attribute mti_svvh_generic_type of GENERATION : constant is 1;
    attribute mti_svvh_generic_type of CR20WAIT_POLARITY : constant is 1;
    attribute mti_svvh_generic_type of CRE_READ : constant is 1;
    attribute mti_svvh_generic_type of BCR_MASK : constant is 1;
    attribute mti_svvh_generic_type of BCR_DEFAULT : constant is 1;
    attribute mti_svvh_generic_type of RCR_MASK : constant is 1;
    attribute mti_svvh_generic_type of RCR_DEFAULT : constant is 1;
    attribute mti_svvh_generic_type of DIDR_MASK : constant is 1;
    attribute mti_svvh_generic_type of DIDR_DEFAULT : constant is 1;
    attribute mti_svvh_generic_type of DEBUG : constant is 1;
    attribute mti_svvh_generic_type of IDLE : constant is 1;
    attribute mti_svvh_generic_type of WR : constant is 1;
    attribute mti_svvh_generic_type of RD : constant is 1;
    attribute mti_svvh_generic_type of CFG_RD : constant is 1;
    attribute mti_svvh_generic_type of CFG_WR : constant is 1;
end cellram;
